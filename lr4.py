def ask_question(factor):
    """Задаёт вопрос пользователю в зависимости от фактора"""
    questions = {
        1: "Сколько дней осталось до экзамена? (целое число)",
        2: "Оцените свой уровень знаний по шкале от 1 до 10:",
        3: "Сколько часов в день вы тратите на подготовку? (число)",
        4: "Есть ли у вас сложные темы? (да/нет)",
        5: "Какова ваша самодисциплина? (высокая/средняя/низкая)",
        6: "Сколько часов в день вы тратите на отвлекающие факторы? (число)",
        7: "Насколько эффективны ваши текущие методы подготовки? (высокая/средняя/низкая)",
        8: "Оцените уровень стресса от 1 до 10:",
        9: "Доступны ли вам учебные ресурсы? (да/нет)",
        10: "Какой у вас график занятий? (загруженный/свободный)",
        11: "Есть ли поддержка от окружения? (да/нет)"
    }
    return input(questions[factor] + "\n> ").strip().lower()

def validate_input(factor, raw_input):
    """Проверяет и преобразует ввод пользователя"""
    try:
        if factor in [1, 2, 3, 6, 8]:  # Числовые значения
            value = int(raw_input)
            if factor == 2 and not (1 <= value <= 10):
                raise ValueError("Значение должно быть от 1 до 10")
            return value
        elif factor in [4, 5, 7, 9, 10, 11]:  # Бинарные/категориальные значения
            if raw_input not in ['да', 'нет', 'высокая', 'средняя', 'низкая', 'загруженный', 'свободный']:
                raise ValueError("Недопустимое значение")
            return raw_input
        else:
            raise ValueError("Неизвестный фактор")
    except ValueError as e:
        print(f"Ошибка ввода: {e}. Попробуйте снова.")
        return validate_input(factor, ask_question(factor))

def collect_data():
    """Собирает данные от пользователя"""
    data = {}
    for factor in range(1, 12):
        data[factor] = validate_input(factor, ask_question(factor))
    return data

def check_rules(data):
    """Проверяет условия для каждой рекомендации"""
    recommendations = []

    # Рекомендация 1: Создать детальный план подготовки
    if (data[3] < 2 or                 # Среднее время < 2 часа
        data[5] == "низкая" or         # Низкая самодисциплина
        data[6] > 3):                  # Отвлекающие факторы > 3 часа/день
        recommendations.append("Создать детальный план подготовки")

    # Рекомендация 2: Использовать методы активного повторения
    if (data[2] < 5 or                 # Уровень знаний < 5
        data[4] == "да" or             # Есть сложные темы
        data[7] == "низкая"):          # Низкая эффективность методов
        recommendations.append("Использовать методы активного повторения")

    # Рекомендация 3: Увеличить время подготовки
    if (data[1] < 7 or                 # Дней до экзамена < 7
        data[2] < 5 or                 # Уровень знаний < 5
        data[3] < 3):                  # Среднее время < 3 часа
        recommendations.append("Увеличить время подготовки")

    # Рекомендация 4: Обратиться за помощью
    if (data[4] == "да" and            # Есть сложные темы
        data[9] == "нет" and           # Нет ресурсов
        data[11] == "нет"):            # Нет поддержки
        recommendations.append("Обратиться за помощью")

    return recommendations

def main():
    """Основная функция программы"""
    print("Добро пожаловать в экспертную систему планирования подготовки к экзаменам!")
    print("Пожалуйста, ответьте на следующие вопросы.\n")
    
    data = collect_data()
    recommendations = check_rules(data)

    print("\nРекомендации:")
    if recommendations:
        for rec in recommendations:
            print(f"- {rec}")
    else:
        print("На основе ваших ответов нет подходящих рекомендаций.")

if __name__ == "__main__":
    main()